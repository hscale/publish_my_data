require 'spec_helper'

module PublishMyData
  module Statistics
    describe CSVBuilder do
      subject(:builder) {
        CSVBuilder.new(
          site_name: "example.com",
          timestamp: Time.new(2013, 10, 16, 11, 37, 29, "+01:00"),
          source_url: "http://example.com/downloads/data.csv",
          header_row_strategies: {
            dataset:          { display: :uri,   padding: :blank },
            measure_property: { display: :label, padding: :blank },
            dimension_value:  { display: :label, padding: :duplicate },
            blank:            { display: :none,  padding: :blank }
          }
        )
      }

      let(:parsed_output) { CSV.parse(builder.to_csv) }

      example "header, no body" do
        builder.document_header_started
        builder.document_header_finished

        expect(parsed_output).to be == [
          ["Generated by example.com", "2013-10-16 11:37:29 +0100"],
          ["Source:", "http://example.com/downloads/data.csv"],
          []
        ]
      end

      describe "header row" do
        describe "display formats" do
          example "display: uri" do
            builder.header_row(
              [
                Snapshot::HeaderColumn.new(
                  dataset_uri: "uri:dataset/1", uri: "uri:dataset/1", label: "Dataset 1", width: 1, type: :dataset)
              ]
            )
            expect(parsed_output).to be == [
              ["", "", "uri:dataset/1"]
            ]
          end

          example "display: label" do
            builder.header_row(
              [
                Snapshot::HeaderColumn.new(
                  dataset_uri: "uri:dataset/1", uri: "uri:measure-property/1", label: "Measure Property 1", width: 1, type: :measure_property),
              ]
            )
            expect(parsed_output).to be == [
              ["", "", "Measure Property 1"]
            ]
          end

          example "display: blank" do
            builder.header_row(
              [
                # Assuming blank is the default, if not we want to know about it
                Snapshot::HeaderColumn.new(
                  dataset_uri: "uri:unused", uri: "uri:unused", label: "Unused", width: 1),
              ]
            )
            expect(parsed_output).to be == [
              ["", "", ""]
            ]
          end
        end

        describe "padding" do
          example "width 1" do
            builder.header_row(
              [
                Snapshot::HeaderColumn.new(
                  dataset_uri: "uri:dataset/1", uri: "uri:dataset/1", label: "Dataset 1", width: 1, type: :dataset),
                Snapshot::HeaderColumn.new(
                  dataset_uri: "uri:dataset/1", uri: "uri:dataset/2", label: "Dataset 2", width: 1, type: :dataset)
              ]
            )
            expect(parsed_output).to be == [
              ["", "", "uri:dataset/1", "uri:dataset/2"]
            ]
          end

          example "blank padding" do
            builder.header_row(
              [
                Snapshot::HeaderColumn.new(
                  dataset_uri: "uri:dataset/1", uri: "uri:dataset/1", label: "Dataset 1", width: 3, type: :dataset),
                Snapshot::HeaderColumn.new(
                  dataset_uri: "uri:dataset/1", uri: "uri:dataset/2", label: "Dataset 2", width: 1, type: :dataset)
              ]
            )
            expect(parsed_output).to be == [
              ["", "", "uri:dataset/1", "", "", "uri:dataset/2"]
            ]
          end

          example "duplicate padding" do
            builder.header_row(
              [
                Snapshot::HeaderColumn.new(
                  dataset_uri: "uri:dataset/1", uri: "uri:dim/1/val/1", label: "Dimension value 1", width: 3, type: :dimension_value),
                Snapshot::HeaderColumn.new(
                  dataset_uri: "uri:dataset/1", uri: "uri:dim/1/val/2", label: "Dimension value 2", width: 1, type: :dimension_value)
              ]
            )
            expect(parsed_output).to be == [
              ["", "", "Dimension value 1", "Dimension value 1", "Dimension value 1", "Dimension value 2"]
            ]
          end
        end
      end

      describe "table body rows" do
        example do
          builder.table_row(
            row_uri: "uri:row/1", row_label: "Row 1", values: [1, 2, 3]
          )
          expect(parsed_output).to be == [
            ["uri:row/1", "Row 1", "1", "2", "3"]
          ]
        end
      end
    end
  end
end