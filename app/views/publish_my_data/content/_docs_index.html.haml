-# -------------------------------------------------------------------
-#  FULL WIDTH INTRODUCTION
-# -------------------------------------------------------------------

- content_for :docs_intro do
  :markdown
    # Developer Documentation
    This page describes the current version of our production API, which was deployed on 26th of June 2013. This release included only backward-compatible changes. See our [Change Log](/changelog) for more details of what changed.

-# -------------------------------------------------------------------
-#  CONTENTS NAVIGATION
-# -------------------------------------------------------------------

- content_for :docs_contents do
  %nav.contents
    %h2 Contents

    %h3
      1 -
      %strong Linked Data API

    %ul
      %li
        %a(href="#uri-dereferencing")
          1.1
          %strong URI Dereferencing
      %li
        %a(href="#resource-formats")
          1.2
          %strong Resource Formats
      %li
        %a(href="#ruby-dereferencing")
          1.2
          %strong Example: Dereferencing URIs with Ruby
      %li
        %a(href="#curl-dereferencing")
          1.2
          %strong Example: Dereferencing URIs with cURL

    %h3
      2 -
      %strong Other Resource APIs
    %ul
      %li
        %a(href="#individual-datasets")
          2.1
          %strong Individual Datasets
      %li
        %a(href="#themes")
          2.2
          %strong Themes
      %li
        %a(href="#dataset-collections")
          2.3
          %strong Collections of Datasets
      %li
        %a(href="#individual-resources")
          2.4
          %strong Individual Resources
      %li
        %a(href="#resource-collections")
          2.5
          %strong Collections of Resources
      %li
        %a(href="#resource-options-and-limits")
          2.6
          %strong Options and Limits
      %li
        %a(href="#ruby-resources-example")
          2.7
          %strong Example: Using Ruby to get a filtered list of resources
      %li
        %a(href="#js-resources-example")
          2.9
          %strong Example: Using JavaScript to get a filtered list of resources
      %li
        %a(href="#curl-resources-example")
          2.9
          %strong Example: Using cURL to get the list of datasets in a theme

    %h3
      3 -
      %strong SPARQL
    %ul
      %li
        %a(href="#sparql-introduction")
          3.1
          %strong Introduction to SPARQL
      %li
        %a(href="#sparql-results-formats")
          3.2
          %strong SPARQL Results Formats
      %li
        %a(href="#sparql-results-pagination")
          3.3
          %strong SPARQL Results Pagination
      %li
        %a(href="#sparql-errors")
          3.4
          %strong SPARQL Errors
      %li
        %a(href="#sparql-json-p")
          3.5
          %strong JSON-P
      %li
        %a(href="#named-graphs")
          3.6
          %strong Use of Named Graphs
      %li
        %a(href="#parameter-interpolation")
          3.7
          %strong Parameter Substitution
      %li
        %a(href="#ruby-sparql-example")
          3.8
          %strong Example: Using Ruby to request data from the SPARQL Endpoint
      %li
        %a(href="#js-sparql-example")
          3.9
          %strong Example: Using JavaScript to request data from the SPARQL Endpoint

    %h3
      4 -
      %strong General
    %ul
      %li
        %a(href="#response-size-limits")
          4.1
          %strong Response Size Limits
      %li
        %a(href="#errors")
          4.2
          %strong Errors
      %li
        %a(href="#cors")
          4.3
          %strong CORS
      %li
        %a(href="#discontinued-datasets")
          4.4
          %strong Discontinued Datasets
      %li
        %a(href="#api-keys")
          4.5
          %strong API Keys

-# -------------------------------------------------------------------
-#  MAIN CONTENT
-# -------------------------------------------------------------------

= documentation_section "1", "Linked Data API" do
  = documentation_subsection "1.1", "URI Dereferencing" do
    %p Following the standard practices for Linked Data, we distinguish between a 'real-world' resource and documents about that resource. <strong>Identifiers (URIs)</strong> for the resources follow the pattern:
    = codeblock "uri" do
      http://{data-site-domain}/<strong>id</strong>/{...}
    %p When you look them up you get redirected to the corresponding document about that thing. The <strong>document URLs</strong> follow the pattern:
    = codeblock "uri" do
      http://{data-site-domain}/<strong>doc</strong>/{...}
    %p For example, for a URI identified by a URI:
    = codeblock "uri" do
      http://{data-site-domain}/<strong>id</strong>/my/resource
    %p If you put it into your browser you get redirected, with an HTTP status code of 303 ("See Other"), to an HTML page about that resource
    = codeblock "uri" do
      http://{data-site-domain}/<strong>doc</strong>/my/resource
    %p In cases where a URI identifies something that is essentially a document (an 'information resource') then we respond with a 200, as their URI and document page URL are one and the same.  This includes [Datasets](#individual-datasets) as well as ontology terms and concept schemes.

  = documentation_subsection "1.2", "Resource Formats" do
    %p You can specify what format you want the resulting document to be in.  By default you get HTML in a human-readable form, but you can also ask for the document in one of several RDF formats: <strong>RDF/XML</strong>, <strong>N-triples</strong>, <strong>Turtle</strong> or <strong>JSON-LD</strong>.
    %p There are two ways to specify which format you want: you can append a <strong>format extension</strong> to the document page's URL or you can use an <strong>HTTP Accept header</strong> with the resource's URI or document page's URL.
    %table
      %thead
        %tr
          %th Format
          %th Extensions
          %th Accept Headers
      %tbody
        %tr
          %td.details RDF/XML
          %td .rdf
          %td.hardwrap application/rdf+xml
        %tr
          %td.details n-triples
          %td .nt, .txt, .text
          %td.hardwrap
            application/n-triples,
            text/plain
        %tr
          %td.details Turtle
          %td .ttl
          %td.hardwrap text/turtle
        %tr
          %td.details JSON-LD
          %td .json
          %td.hardwrap
            application/ld+json,
            application/json

  = documentation_subsection "1.3", "Example: Dereferencing URIs with Ruby" do
    %p
      Here's an example of dereferencing a URI using the
      = link_to "RestClient", "http://rubydoc.info/gems/rest-client"
      library. Similar approaches can be taken in other languages. This assumes you already have Ruby set up on your system. Also, if you don't already have it, you'll need to install the gem:
    = codeblock "ruby" do
      $ gem install rest-client
    %p &hellip; and require it in your script.
    = codeblock "ruby" do
      require 'rest-client'

    = documentation_subsubsection "1.3.1", "Specifying the format in an accept header - in this case RDF/XML" do
      %p If you're using the accept header, you can directly request the URI. This involves two requests, because doing an HTTP GET on the resource identifier gives you a 303 redirect to the appropriate document page. RestClient looks after that for you.
      = codeblock "ruby" do
        RestClient.get 'http://{data-site-domain}/id/my/resource, :accept=>'application/rdf+xml'
      %p You can also request the document page directly:
      = codeblock "ruby" do
        RestClient.get 'http://{data-site-domain}/doc/my/resource', :accept=>'application/rdf+xml'

    = documentation_subsubsection "1.3.2", "Specifing the format as an extension - in this case JSON" do
      %p If using an extension, you must request the document page directly (as '.json' is not part of the URI)
      = codeblock "ruby" do
        RestClient.get 'http://{data-site-domain}/doc/my/resource.json'