-# -------------------------------------------------------------------
-#  FULL WIDTH INTRODUCTION
-# -------------------------------------------------------------------

- content_for :docs_intro do
	%h1 Developer Documentation
	%p This page describes the current version of our production API, which was deployed on 26th of June 2013. This release included only backward-compatible changes. See our [Change Log](/changelog) for more details of what changed.

-# -------------------------------------------------------------------
-#  CONTENTS NAVIGATION
-# -------------------------------------------------------------------

- content_for :docs_contents do
	%nav.contents
		%h2 Contents

		%h3
			1 -
			%strong Linked Data API

		%ul
			%li
				%a(href="#uri-dereferencing")
					1.1
					%strong URI Dereferencing
			%li
				%a(href="#resource-formats")
					1.2
					%strong Resource Formats
			%li
				%a(href="#ruby-dereferencing")
					1.2
					%strong Example: Dereferencing URIs with Ruby
			%li
				%a(href="#curl-dereferencing")
					1.2
					%strong Example: Dereferencing URIs with cURL

		%h3
			2 -
			%strong Other Resource APIs
		%ul
			%li
				%a(href="#individual-datasets")
					2.1
					%strong Individual Datasets
			%li
				%a(href="#themes")
					2.2
					%strong Themes
			%li
				%a(href="#dataset-collections")
					2.3
					%strong Collections of Datasets
			%li
				%a(href="#individual-resources")
					2.4
					%strong Individual Resources
			%li
				%a(href="#resource-collections")
					2.5
					%strong Collections of Resources
			%li
				%a(href="#resource-options-and-limits")
					2.6
					%strong Options and Limits
			%li
				%a(href="#ruby-resources-example")
					2.7
					%strong Example: Using Ruby to get a filtered list of resources
			%li
				%a(href="#js-resources-example")
					2.9
					%strong Example: Using JavaScript to get a filtered list of resources
			%li
				%a(href="#curl-resources-example")
					2.9
					%strong Example: Using cURL to get the list of datasets in a theme

		%h3
			3 -
			%strong SPARQL
		%ul
			%li
				%a(href="#sparql-introduction")
					3.1
					%strong Introduction to SPARQL
			%li
				%a(href="#sparql-results-formats")
					3.2
					%strong SPARQL Results Formats
			%li
				%a(href="#sparql-results-pagination")
					3.3
					%strong SPARQL Results Pagination
			%li
				%a(href="#sparql-errors")
					3.4
					%strong SPARQL Errors
			%li
				%a(href="#sparql-json-p")
					3.5
					%strong JSON-P
			%li
				%a(href="#named-graphs")
					3.6
					%strong Use of Named Graphs
			%li
				%a(href="#parameter-interpolation")
					3.7
					%strong Parameter Substitution
			%li
				%a(href="#ruby-sparql-example")
					3.8
					%strong Example: Using Ruby to request data from the SPARQL Endpoint
			%li
				%a(href="#js-sparql-example")
					3.9
					%strong Example: Using JavaScript to request data from the SPARQL Endpoint

		%h3
			4 -
			%strong General
		%ul
			%li
				%a(href="#response-size-limits")
					4.1
					%strong Response Size Limits
			%li
				%a(href="#errors")
					4.2
					%strong Errors
			%li
				%a(href="#cors")
					4.3
					%strong CORS
			%li
				%a(href="#discontinued-datasets")
					4.4
					%strong Discontinued Datasets
			%li
				%a(href="#api-keys")
					4.5
					%strong API Keys

-# -------------------------------------------------------------------
-#  MAIN CONTENT
-# -------------------------------------------------------------------

= documentation_section "Linked Data API" do
	= documentation_subsection "URI Dereferencing" do
		%p Following the standard practices for Linked Data, we distinguish between a 'real-world' resource and documents about that resource. <strong>Identifiers (URIs)</strong> for the resources follow the pattern:
		= codeblock "uri" do
			http://{data-site-domain}/<strong>id</strong>/{...}
		%p When you look them up you get redirected to the corresponding document about that thing. The <strong>document URLs</strong> follow the pattern:
		= codeblock "uri" do
			http://{data-site-domain}/<strong>doc</strong>/{...}
		%p For example, for a URI identified by a URI:
		= codeblock "uri" do
			http://{data-site-domain}/<strong>id</strong>/my/resource
		%p If you put it into your browser you get redirected, with an HTTP status code of 303 ("See Other"), to an HTML page about that resource
		= codeblock "uri" do
			http://{data-site-domain}/<strong>doc</strong>/my/resource
		%p In cases where a URI identifies something that is essentially a document (an 'information resource') then we respond with a 200, as their URI and document page URL are one and the same.  This includes [Datasets](#individual-datasets) as well as ontology terms and concept schemes.
	= documentation_subsection "Resource Formats" do
		%p You can specify what format you want the resulting document to be in.  By default you get HTML in a human-readable form, but you can also ask for the document in one of several RDF formats: <strong>RDF/XML</strong>, <strong>N-triples</strong>, <strong>Turtle</strong> or <strong>JSON-LD</strong>.
		%p There are two ways to specify which format you want: you can append a <strong>format extension</strong> to the document page's URL or you can use an <strong>HTTP Accept header</strong> with the resource's URI or document page's URL.
		%table
			%thead
				%tr
					%th Format
					%th Extensions
					%th Accept Headers
			%tbody
				%tr
					%td.details RDF/XML
					%td .rdf
					%td.hardwrap application/rdf+xml
				%tr
					%td.details n-triples
					%td .nt, .txt, .text
					%td.hardwrap
						application/n-triples,
						text/plain
				%tr
					%td.details Turtle
					%td .ttl
					%td.hardwrap text/turtle
				%tr
					%td.details JSON-LD
					%td .json
					%td.hardwrap
						application/ld+json,
						application/json
	= documentation_subsection "Example: Dereferencing URIs with Ruby" do
		%p
			Here's an example of dereferencing a URI using the
			= link_to "RestClient", "http://rubydoc.info/gems/rest-client"
			library. Similar approaches can be taken in other languages. This assumes you already have Ruby set up on your system. Also, if you don't already have it, you'll need to install the gem:
		= codeblock "ruby" do
			$ gem install rest-client
		%p &hellip; and require it in your script.
		= codeblock "ruby" do
			require 'rest-client'
		= documentation_subsubsection "Specifying the format in an accept header - in this case RDF/XML" do
			%p If you're using the accept header, you can directly request the URI. This involves two requests, because doing an HTTP GET on the resource identifier gives you a 303 redirect to the appropriate document page. RestClient looks after that for you.
			= codeblock "ruby" do
				RestClient.get 'http://{data-site-domain}/id/my/resource, :accept=>'application/rdf+xml'
			%p You can also request the document page directly:
			= codeblock "ruby" do
				RestClient.get 'http://{data-site-domain}/doc/my/resource', :accept=>'application/rdf+xml'
		= documentation_subsubsection "Specifing the format as an extension - in this case JSON" do
			%p If using an extension, you must request the document page directly (as '.json' is not part of the URI)
			= codeblock "ruby" do
				RestClient.get 'http://{data-site-domain}/doc/my/resource.json'
	= documentation_subsection "Example: Dereferencing URIs with cURL" do
		%p
			Here's an example of dereferencing a URI using the widely available
			= link_to "cURL", "http://curl.haxx.se"
			command line program.
		= documentation_subsubsection "Specifying the format in an accept header (in this case, Turtle)" do
			%p If you're using the accept header, you can directly request the URI. This involves two requests, because doing an HTTP GET on the resource identifier gives you a 303 redirect to the appropriate document page. cURL looks after that for you if you use the <code>-L</code> option.
			= codeblock "terminal" do
				curl -L -H "Accept: text/turtle" http://{data-site-domain}/id/my/resource
			%p You can also request the document page directly
			= codeblock "terminal" do
				curl -H "Accept: text/turtle" http://{data-site-domain}/id/my/resource
		= documentation_subsubsection "Specifing the format as an extension (in this case N-triples)" do
			%p If using an extension, you must request the document page directly (as '.nt' is not part of the URI)
			= codeblock "terminal" do
				curl http://{data-site-domain}/doc/my/resource.nt

= documentation_section "Other Resource APIs" do
	= documentation_subsection "Ways to access data" do
		%p Alongside the URI dereferencing we offer the following additional ways of accessing data in the system. Please be sure to read the [Options and Limits](#resource-options-and-limits) section, for some background information which applies to all these APIs, such as details on data formats and pagination.
		%p Some examples of accessing the data from our APIs using different languages follow at the end of this section.
	= documentation_subsection "Individual Datasets" do
		%p Dataset identifiers take the form
		= codeblock "uri" do
			http://example.com/data/{dataset-short-name}
		%p where <code>{dataset-short-name}</code> is a URI section that uniquely identifies the dataset. The short name can contain lower-case letters, numbers, slashes, and hyphens.
		%p Dereferencing a dataset identifier responds with HTTP status code 200 and provides metadata about the dataset, including a link to where the dataset contents can be downloaded. e.g.:
		= codeblock "uri" do
			http://{data-site-domain}/data/my/dataset
		%p Please also see the [Use of Named Graphs](#named-graphs) section, for how the dataset data and metadata is stored in the database.
	= documentation_subsection "Themes" do
		%p Datasets are grouped into Themes. A list of all themes is available at:
		= codeblock "uri" do
			http://{data-site-domain}/themes
		%p Information about a particular theme can be accessed by [dereferencing](#uri-dereferencing) the theme's URI. e.g.
		= codeblock "uri" do
			http://{data-site-domain}/def/concept/themes/my/theme
	= documentation_subsection "Collections of Datasets" do
		%p A list of all datasets is available at:
		= codeblock "uri" do
			http://{data-site-domain}/data
		%p [paginatable](#resource-options-and-limits) with <code>page</code> and <code>per_page</code>.
		%p Lists of datasets in a single theme are available at:
		= codeblock "uri" do
			http://{data-site-domain}/themes/{theme-name}
		%p where <code>{theme-name}</code> is the part of the theme URI after <code>/themes/</code>
	= documentation_subsection "Individual Resources" do
		%p As well as using [URI dereferencing](#uri-dereferencing) to access information about individual resources, you can use the following URL pattern:
		= codeblock "uri" do
			http://{data-site-domain}/resource?uri={resource-uri}
		%p This is especially useful for resources for which we have information in our database, but which aren't in the site's domain (i.e. so you can't dereference them in this site). e.g.
		= codeblock "uri" do
			http://{data-site-domain}/resource?uri=http://another.domain/id/external/resource
		%p If using a format extension to request a particular format for the resource, the extension is added immediately after '/resource', for example to get a JSON-LD version of the above postcode
		= codeblock "uri" do
			http://{data-site-domain}/resource.json?uri={resource-uri}
	= documentation_subsection "Collections of Resources" do
		%p Collections of resources can be retrieved from <code>/resources</code> by supplying filters. For now, we just support filters for <code>dataset</code> and <code>type_uri</code>.
		%table
			%thead
				%tr
					%th Filter parameter
					%th Expected value
					%th Behaviour
			%tbody
				%tr
					%td.details dataset
					%td The <span style="font-style:italic">short name</span> of a dataset (see <a href="#individual-datasets">above</a>).
					%td Filters the results to only include resources in the named graph of that dataset.
				%tr
					%td.details type_uri
					%td The URI of a resource type.
					%td Filters the results to only include resources of the type identified by that URI.
		%p e.g.
		= codeblock "uri" do
			http://{data-site-domain}/resources?dataset={dataset-name}&type_uri={URL-encoded type URI}
		= codeblock "uri" do
			http://{data-site-domain}/resources?dataset=my-dataset&type_uri=http%3A%2F%2Fexample.com%2Fdef%2Fmy%2Ftype
	= documentation_subsection "Options and Limits" do
		= documentation_subsubsection "Formats" do
			%p Resources accessed via our resource APIs can be accessed in the same [choice of formats](#resource-format) as for URI dereferencing (via both **format extensions** or **HTTP Accept headers**).
		= documentation_subsubsection "Pagination" do
			%p For any APIs which return collections of things, the list can be paginated using <code>page</code> (default 1) and <code>per_page</code> (default 1000) query-string parameters. The maximum allowable page size will initially be set to 1000, but we may consider increasing this (as well as the default) in the future.
		= documentation_subsubsection "Response Size Limits" do
			%p All requests to our APIs are subject to the [response size limits](#response-size-limits).
	= documentation_subsection "Example: Using Ruby to get a filtered list of resources" do
		= documentation_subsubsection "Basic Example" do
			%p Here we use Ruby to retrieve a list of all resources of a type in a dataset as N-triples.
			%p Let's assume the short name for that dataset is <code>my/dataset</code>, and the URI for the type is <code>http://purl.org/linked-data/cube#Observation</code>, so the URL we need to call is as follows. (See [the Collections of Resources section](#resource-collections)).
			= codeblock "uri" do
				http://{site-domain}/resources?dataset=my%2Fdatase&type_uri=http%3A%2F%2Fpurl.org%2Flinked-data%2Fcube%23Observation
			%p If you visited that URL in your browser (substituting the site domain, dataset name and type uri for real values), you'd see a paginated list of the resources. You can try this by clicking on the links in the footers of the sample resource tables on dataset pages.
			%p We want to get it in N-triples format, so we'll add the .nt extension. (See the [Formats section](#resource-formats)).
			%p The following Ruby code assigns a string of N-triples into the <code>ntriples_data</code> variable. Note that as the [maximum page size](#resource-options-and-limits) is 1000, and there are over 1000 resoures of that type in the dataset, we'll need to make multiple requests.
			%p We use the [RestClient](http://rubydoc.info/gems/rest-client) here, which you can install with <code>$ gem install rest-client</code>.
			= codeblock_pre "uri" do
				= preserve do
					:escaped
						require 'rest-client'

						url = "http://{site-domain}/resources.nt"

						ntriples_data = ""
						page = 1
						done = false

						while !done
							puts "requesting page \#{page}..."
							response = RestClient.get url, {:params =>
								{
									:page => page,
									:per_page => 1000,
									:dataset => "my/dataset",
									:type_uri => "http://purl.org/linked-data/cube#Observation"
								}
							}

							if response.length > 0
								ntriples_data += response
								page += 1
							else
								puts "no more data"
								done = true
							end
						end

						puts "data:"
						puts ntriples_data
		= documentation_subsubsection "Extension: parsing the n-triples into an array of statements" do
			%p The [ruby-rdf](http://rubydoc.info/github/ruby-rdf/rdf/master/) library is useful for parsing various rdf formats. Install it with <code>$ gem install rdf</code>. The following code reads our string of ntriples data into an array of <code>RDF::Statement</code>s.
			= codeblock_pre "uri" do
				= preserve do
					:escaped
						require 'rdf'

						statements = []
						RDF::Reader.for(:ntriples).new(ntriples_data) {|r| r.each {|s| statements << s}}

						puts "parsed \#{statements.length} triples"
			%p <strong>Note</strong>: If you're doing a lot of work with RDF in Ruby, you might want to look at using [Swirrl](http://swirrl.com)'s open-source SPARQL ORM for Ruby, [Tripod](http://github.com/swirrl/tripod).
	= documentation_subsection "Example: Using JavaScript to get a filtered list of resources" do
		%p Here we use jQuery to retrieve a list of all the resources of a certain type in a dataset, as JSON-LD.
		%p Let's assume the short name for that dataset is <code>my/dataset</code>, and the URI for the type is <code>http://purl.org/linked-data/cube#Observation</code>, so the URL we need to call is as follows. (See [the Collections of Resources section](#resource-collections)).
		= codeblock "uri" do
			http://{site-domain}/resources?dataset=my%2Fdatase&type_uri=http%3A%2F%2Fpurl.org%2Flinked-data%2Fcube%23Observation
		%p If you visited that URL in your browser (substituting the site domain, dataset name and type uri for real values), you'd see a paginated list of the resources. You can try this by clicking on the links in the footers of the sample resource tables on dataset pages.
		%p We want to get it in JSON format, so we'll add the .json extension. (See the [Formats section](#resource-formats)).
		%p The following HTML page uses JavaScript to request the data as JSON and add it to the <code>results</code> array. Note that as the [maximum page size](#resource-options-and-limits) is 1000, and there are over 1000 resoures of that type in the dataset, we'll need to make multiple requests.
		= codeblock_pre "uri" do
			= preserve do
				:escaped
					<!DOCTYPE html>
					<html>
						<head>
							<script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
						</head>
						<body>
							<script type="text/javascript">
								var perPage = 100;
								var typeUri = "http://purl.org/linked-data/cube#Observation";
								var dataset = "my/dataset";

								var baseUrl = "http://{site-domain}/resources.json?"
								baseUrl += "per_page=" + perPage.toString();
								baseUrl += "&dataset=" + encodeURIComponent(dataset);
								baseUrl += "&type_uri=" + encodeURIComponent(typeUri);

								var page = 1;
								var results = [];

								function callAjaxPaging() {
									console.log("trying page: " + page.toString());
									url = baseUrl + "&page=" + page.toString();

									$.ajax({
										dataType: 'json',
										url: url,
										success: function(pageOfData) {
											results = results.concat(pageOfData);
											console.log("got " + results.length.toString() + " so far");

											if (pageOfData.length == perPage) {
												// this page was full. There might be more.
												page += 1;
												console.log("trying next page");
												callAjaxPaging();
											} else {
												// no more pages.
												alert('finished with ' + results.length.toString() + " results");
											}
										}
									});
								}

								alert('press OK to begin');
								callAjaxPaging();
							</script>
						</body>
					</html>
	= documentation_subsection "Example: Using cURL to get the list of datasets in a theme" do
		%p
			Here we use the 
			= link_to "cURL", "http://curl.haxx.se"
			command line program to get a list of datasets in the a theme, as JSON-LD.
		%p Let's assume the theme's name is <code>my/theme</code> is, so the URL we need to call is as follows. (See the [Collections of Datasets section](#dataset-collections)).
		= codeblock "uri" do
			http://{site-domain}/themes/my/theme
		%p We'll use the Accept header to tell the server we want the response as JSON.
		= codeblock "terminal" do
			curl -H "Accept: application/json" http://{site-domain}/themes/my/theme



= documentation_section "SPARQL" do
	TODO

= documentation_section "General" do
	TODO